name: Build & Publish Android e iOS (S3 Keystore)

on:
  push:
    branches-ignore: ["master"]
  workflow_dispatch:

jobs:
  # publish-android:
  #   runs-on: macos-latest

  #   steps:
  #     # 1) Checkout do repositório
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     # 2) Instalar AWS CLI (para baixar keystore)
  #     - name: Install AWS CLI
  #       run: brew install awscli

  #     # 3) Baixar keystore do S3
  #     - name: Download Keystore
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         AWS_DEFAULT_REGION: us-east-2
  #       run: |
  #         aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
  #         aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
  #         aws configure set default.region "$AWS_DEFAULT_REGION"
  #         aws s3 cp "s3://app-generator-robson/keystores/thefamous-olga.keystore" "android/app/thefamous-olga.keystore"
  #         ls -la android/app/

  #     # 4) Configurar JDK 17
  #     - name: Set up JDK 17
  #       uses: actions/setup-java@v3
  #       with:
  #         distribution: 'temurin'
  #         java-version: '17'

  #     # 5) Setup Node
  #     - name: Setup Node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 18

  #     # 6) Setup Ruby
  #     - name: Setup Ruby
  #       uses: actions/setup-ruby@v1
  #       with:
  #         ruby-version: '3.0'
  #         bundler-cache: true

  #     # 7) Instalar Dependências do Node
  #     - name: Install Dependencies
  #       run: npm install --force

  #     # 8) Criar google-play-key.json
  #     - name: Create Google JSON
  #       run: echo "${{ secrets.ANDROID_JSON_KEY }}" | base64 --decode > android/google-play-key.json

  #     # 9) Debug JSON (opcional)
  #     - name: Debug JSON
  #       run: |
  #         echo "==== Conteúdo de google-play-key.json ===="
  #         cat android/google-play-key.json
  #         echo "=========================================="

  #     # 10) (Opcional) bundle install se você tiver um Gemfile
  #     # - name: Bundle Install
  #     #   run: bundle install

  #     # 11) Deploy Android (chamando a plataforma explicitamente)
  #     - name: Deploy Android
  #       run: |
  #         cd android
  #         fastlane android deploy_android

  #     # 12) Remover Keystore (opcional)
  #     - name: Remove Keystore
  #       run: rm -f android/app/thefamous-olga.keystore

  #     # 13) Notificar Discord (Android)
  #     - name: Notify Discord (Android)
  #       if: always()
  #       run: |
  #         if [ "${{ job.status }}" = "success" ]; then
  #           curl -X POST -H "Content-Type: application/json" \
  #             -d '{"content":"✅ Build & publicação do Android *SUCESSO*! "}' \
  #             ${{ secrets.DISCORD_WEBHOOK_URL }}
  #         else
  #           curl -X POST -H "Content-Type: application/json" \
  #             -d '{"content":"❌ Build & publicação do Android *FALHOU*."}' \
  #             ${{ secrets.DISCORD_WEBHOOK_URL }}
  #         fi
 #
  # --------------------------------------------------
  # Job para iOS (depende do Android ter finalizado)
  # --------------------------------------------------
  publish-ios:
    runs-on: macos-latest
    # needs: publish-android

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true

      - name: Clear Gem Cache
        run: |
          gem sources --remove https://rubygems.org/
          gem sources -a https://rubygems.org/
          gem cleanup
          gem uninstall boost -aIx || true    
          
        # 7) Instalar Dependências do Node
      - name: Install Dependencies
        run: npm install --force
      - name: install Dependencies
        run: |
          npm install --save-dev patch-package postinstall-postinstall --force
      - name: Navigate to iOS directory and install pods
        run: |
          cd /Users/runner/work/app/app/ios
          if [ ! -f Podfile ]; then
            pod init
          fi
          pod install
        shell: /bin/bash -e {0}     

      - name: Install pod
       
        run: |
         cd  /Users/runner/work/app/app/ios
         pod install --no-repo-update

 
      

      - name: Install Fastlane
        run: gem install fastlane
        

      - name: Create API Key
        run: echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}" | base64 --decode > android/AuthKey_OLGA.p8

      - name: Debug API Key
        run: |
          echo "==== Conteúdo do AuthKey_OLGA.p8 ===="
          cat android/AuthKey_OLGA.p8
          echo "======================================"

      - name: Build & Deploy iOS
        env:
          FASTLANE_USER: ${{ secrets.APPLE_ID }}
          FASTLANE_PASSWORD: ${{ secrets.APPLE_SPECIFIC_PASSWORD }}
          CERT_GIT: ${{ secrets.GH_TOKEN_REPO }}  
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        run: |
          cd android
          fastlane ios deploy_ios

      - name: Notify Discord (iOS)
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            curl -X POST -H "Content-Type: application/json" \
              -d '{"content":"✅ Build & publicação do iOS *SUCESSO*! "}' \
              ${{ secrets.DISCORD_WEBHOOK_URL }}
          else
            curl -X POST -H "Content-Type: application/json" \
              -d '{"content":"❌ Build & publicação do iOS *FALHOU*."}' \
              ${{ secrets.DISCORD_WEBHOOK_URL }}
          fi