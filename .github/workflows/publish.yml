name: Build & Publish Android e iOS (S3 Keystore)

on:
  push:
    branches-ignore: ["master"]
  workflow_dispatch:

jobs:
  publish-android:
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install AWS CLI
        run: brew install awscli

      - name: Download Keystore
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2
        run: |
          aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
          aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
          aws configure set default.region "$AWS_DEFAULT_REGION"
          aws s3 cp "s3://app-generator-robson/keystores/thefamous-olga.keystore" "android/app/thefamous-olga.keystore"
          ls -la android/app/

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Setup Ruby
        uses: actions/setup-ruby@v2
        with:
          ruby-version: '3.0'
          bundler-cache: true

      - name: Install Dependencies
        run: npm install --force

      - name: Create Google JSON
        run: echo "${{ secrets.ANDROID_JSON_KEY }}" | base64 --decode > android/google-play-key.json

      - name: Debug JSON
        run: |
          echo "==== Conteúdo de google-play-key.json ===="
          cat android/google-play-key.json
          echo "=========================================="

      - name: Deploy Android
        run: |
          cd android
          bundle exec fastlane android deploy_android

      - name: Remove Keystore
        run: rm -f android/app/thefamous-olga.keystore

      - name: Notify Discord (Android)
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            curl -X POST -H "Content-Type: application/json" \
              -d '{"content":"✅ Build & publicação do Android *SUCESSO*! "}' \
              ${{ secrets.DISCORD_WEBHOOK_URL }}
          else
            curl -X POST -H "Content-Type: application/json" \
              -d '{"content":"❌ Build & publicação do Android *FALHOU*."}' \
              ${{ secrets.DISCORD_WEBHOOK_URL }}
          fi

  publish-ios:
    runs-on: macos-latest
    needs: publish-android

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Ruby
        uses: actions/setup-ruby@v2
        with:
          ruby-version: '3.0'
          bundler-cache: true

      - name: Install Fastlane
        run: bundle install

      - name: Create API Key
        run: |
          echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}" | base64 --decode > AuthKey_OLGA.p8
          ls -la # Debug: Verify file creation

      - name: Build & Deploy iOS
        env:
          FASTLANE_USER: ${{ secrets.APPLE_ID }}
          FASTLANE_PASSWORD: ${{ secrets.APPLE_SPECIFIC_PASSWORD }}
          CERT_GIT: ${{ secrets.CERT_GIT }}
        run: |
          bundle exec fastlane ios deploy_ios

      - name: Notify Discord (iOS)
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            curl -X POST -H "Content-Type: application/json" \
              -d '{"content":"✅ Build & publicação do iOS *SUCESSO*! "}' \
              ${{ secrets.DISCORD_WEBHOOK_URL }}
          else
            curl -X POST -H "Content-Type: application/json" \
              -d '{"content":"❌ Build & publicação do iOS *FALHOU*."}' \
              ${{ secrets.DISCORD_WEBHOOK_URL }}
          fi