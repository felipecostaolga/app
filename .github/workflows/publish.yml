name: Build & Publish Android e iOS (S3 Keystore)

on:
  push:
    branches-ignore: ["master"]
  workflow_dispatch:

jobs:
  publish-android:
    runs-on: macos-latest

    steps:
      # 1) Checkout do repositório
      - name: Checkout
        uses: actions/checkout@v3

      # 2) Instalar o AWS CLI (para baixar keystore)
      - name: Install AWS CLI
        run: brew install awscli

      # 3) Configurar e Baixar o Keystore do S3
      - name: Download Keystore
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2
        run: |
          aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
          aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
          aws configure set default.region "$AWS_DEFAULT_REGION"

          aws s3 cp "s3://app-generator-robson/keystores/pizzaforfun-olga.keystore" "android/app/pizzaforfun-olga.keystore"
          ls -la android/app/

      # 4) Configurar JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 5) Configurar Node
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # 6) Configurar Ruby (para Fastlane)
      - name: Setup Ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true

      # 7) Instalar dependências do Node
      - name: Install Dependencies
        run: npm install --force

      # 8) Criar google-play-key.json
      - name: Create Google JSON
        run: echo "${{ secrets.ANDROID_JSON_KEY }}" | base64 --decode > android/google-play-key.json

      # 9) Debug JSON
      - name: Debug JSON
        run: |
          echo "==== Conteúdo de google-play-key.json ===="
          cat android/google-play-key.json
          echo "=========================================="

      # 10) Instalar Fastlane
      - name: Install Fastlane
        run: gem install fastlane

      # 11) Executar Build & Deploy do Android
      - name: Deploy Android
        run: |
          cd android
          fastlane deploy || (fastlane create_app && fastlane deploy)

      # 12) Remover Keystore (opcional)
      - name: Remove Keystore
        run: rm -f android/app/pizzaforfun-olga.keystore

      # 13) Torna o repositório privado (opcional)
      - name: Make Repo Private
        run: |
          curl -X PATCH \
            -H "Authorization: token ${{ secrets.GH_TOKEN_REPO }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/felipecostaolga/app \
            -d '{"private": true}'

      # 14) Debug final do Android
      - name: Debug Android
        run: |
          echo "Listando arquivos no final do job Android:"
          ls -R .
          echo "Listando android/fastlane:"
          ls -la android/fastlane/

      # 15) Notificação Discord (Android)
      - name: Notify Discord (Android)
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            curl -X POST -H "Content-Type: application/json" \
              -d '{"content":"✅ Build & publicação do Android *SUCESSO*! "}' \
              ${{ secrets.DISCORD_WEBHOOK_URL }}
          else
            curl -X POST -H "Content-Type: application/json" \
              -d '{"content":"❌Build & publicação do Android *FALHOU*."}' \
              ${{ secrets.DISCORD_WEBHOOK_URL }}
          fi

  ## ------------------------------
  ## Job para iOS (roda após Android)
  ## ------------------------------
  publish-ios:
    runs-on: macos-latest
    needs: publish-android  # Só inicia depois que o publish-android concluir

    steps:
      # 1) Checkout
      - name: Checkout
        uses: actions/checkout@v3

      # 2) Setup Ruby
      - name: Setup Ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true

      # 3) Instalar Fastlane
      - name: Install Fastlane
        run: gem install fastlane

      # 4) Criar o arquivo da API Key .p8 para App Store Connect
      - name: Create API Key
        run: echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}" | base64 --decode > AuthKey_OLGA.p8

      # 5) Verificar existência da chave
      - name: Debug Key File
        run: |
          ls -la
          if [ -f "./AuthKey_OLGA.p8" ]; then
            echo "Arquivo AuthKey_OLGA.p8 encontrado com sucesso!"
          else
            echo "Erro: Arquivo AuthKey_OLGA.p8 não encontrado!"
            exit 1
          fi

      # 6) Sincronizar Certificados e Profiles via Fastlane Match
      - name: Sync Certificates
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        run: fastlane match appstore

      # 7) Build & Deploy iOS
      - name: Build & Deploy iOS
        env:
          FASTLANE_USER: ${{ secrets.APPLE_ID }}
          FASTLANE_PASSWORD: ${{ secrets.APPLE_SPECIFIC_PASSWORD }}
        run: fastlane ios deploy

      # 8) Debug final do iOS
      - name: Debug iOS
        run: |
          echo "Listando arquivos no final do job iOS:"
          ls -R .

      # 9) Notificação Discord (iOS)
      - name: Notify Discord (iOS)
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            curl -X POST -H "Content-Type: application/json" \
              -d '{"content":"✅ Build & publicação do iOS *SUCESSO*! "}' \
              ${{ secrets.DISCORD_WEBHOOK_URL }}
          else
            curl -X POST -H "Content-Type: application/json" \
              -d '{"content":"❌Build & publicação do iOS *FALHOU*."}' \
              ${{ secrets.DISCORD_WEBHOOK_URL }}
          fi
